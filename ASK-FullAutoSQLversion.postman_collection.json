{
	"info": {
		"_postman_id": "2e9cb2f8-ea55-48a6-b0b0-03e445ceb125",
		"name": "ASK-FullAuto SQL version",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8872089"
	},
	"item": [
		{
			"name": "/sign-in - [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"USER LOGED IN 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login - authenticated > true\", function(){\r",
							"    pm.expect(pm.response.json().authenticated = true)\r",
							"});\r",
							"\r",
							"var myJson = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"tToken\", myJson.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"tokzee3@packiu.com\",\r\n  \"password\": \"ia112221\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sign-in",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "/sign-up - [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"USER LOGED IN 200\", function(){\r",
							"\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.environment.set(\"userLogin\",pm.iterationData.get(\"email\"));\r",
							"    pm.environment.set(\"userPassword\",pm.iterationData.get(\"password\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"name\": \"{{name}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"group\":\"{{group}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sign-up",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "/SQL - Activation code registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"activationCode\", pm.response.json()[0].activationCode)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.environment.set(\"userId\",pm.response.json()[0].id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/api/users?_where=(email,eq,{{email}})",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "_where",
							"value": "(email,eq,{{email}})"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/Users - Activate a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User activated 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/activate/{{userId}}/{{activationCode}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"activate",
						"{{userId}}",
						"{{activationCode}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Users - [S] Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200, User Logged in\", function(){\r",
							"    pm.response.to.have.status(200);})\r",
							"    pm.environment.set(\"sToken\", pm.response.json().token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{userLogin}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sign-in",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Users - [S] Reset Password request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Password reset email sent\", function () {\r",
							"     pm.expect(pm.response.json()).to.be.an('object');\r",
							"     pm.expect(pm.response.json()).to.have.property('status');\r",
							"     pm.expect(pm.response.json()).to.have.property('message');\r",
							"     pm.expect(pm.response.json().status).to.equal('success');\r",
							"     pm.expect(pm.response.json().message).to.equal('Reset password email was sent');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{userLogin}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/forgot-password",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"forgot-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "/SQL - Activation code password reset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"activationCode\", pm.response.json()[0].activationCode)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/api/users?_where=(email,eq,{{userLogin}})",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "_where",
							"value": "(email,eq,{{userLogin}})"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/User - [S] Password Reset Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Password updated\", function () {\r",
							"     pm.expect(pm.response.json()).to.be.an('object');\r",
							"     pm.expect(pm.response.json()).to.have.property('status');\r",
							"     pm.expect(pm.response.json().message).to.equal('Password was changed');\r",
							"     pm.environment.set(\"userPassword\",pm.iterationData.get(\"newPassword\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{newPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reset-password/{{userId}}/{{activationCode}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reset-password",
						"{{userId}}",
						"{{activationCode}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Users - [S] Login New Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200, User Logged in\", function(){\r",
							"    pm.response.to.have.status(200);})\r",
							"    pm.environment.set(\"sToken\", pm.response.json().token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{userLogin}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sign-in",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Users - [T] - Change User Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200, Name Changed\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{newName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/change-name/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"change-name",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Users - [T] - Change user group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200, group changed\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"group\":\"{{newGroup}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/change-group/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"change-group",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Users - [T] - Get All, and match Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('User data matches iteration data', () => {\r",
							"    let userId = pm.environment.get('userId')\r",
							"    let name = pm.iterationData.get('newName')\r",
							"    let group = pm.iterationData.get('newGroup')\r",
							"    let email = pm.environment.get('userLogin')\r",
							"    let obj = pm.response.json().find(e => e.id === userId);\r",
							"    \r",
							"    pm.expect(obj.name).to.eql(name);\r",
							"    pm.expect(obj.group).to.eql(group);    \r",
							"    console.log('Server Data',obj)\r",
							"    console.log('Iteration Data:',name,group,email)\r",
							"\r",
							"   })\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "/quiz [T] Create new quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var myJson = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"tQuiz\", myJson.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Demo Ivans Quiz\",\r\n    \"totalScore\": 18,\r\n    \"passingPercentage\": 75,\r\n    \"showStopperQuestion\": 1,\r\n    \"questions\": [\r\n        {\r\n            \"type\": \"TEXTUAL\",\r\n            \"question\": \"What is your name?\",\r\n            \"score\": 5\r\n        },\r\n        {\r\n            \"type\": \"SINGLE_CHOICE\",\r\n            \"question\": \"Which city is city largest in California?\",\r\n            \"score\": 7,\r\n            \"answer\": 2,\r\n            \"hasOtherOption\": false,\r\n            \"options\": [\r\n                \"San Francisco\",\r\n                \"Sacramento\",\r\n                \"Los Angeles\",\r\n                \"Redding\"\r\n            ]\r\n        },\r\n        {\r\n            \"type\": \"MULTIPLE_CHOICE\",\r\n            \"question\": \"Who was apple founded by?\",\r\n            \"score\": 6,\r\n            \"answers\": [\r\n                0,\r\n                1,\r\n                2\r\n            ],\r\n            \"hasOtherOption\": true,\r\n            \"options\": [\r\n                \"Steve Jobs\",\r\n                \"Steve Wozniak\",\r\n                \"Ronald Wayne\",\r\n                \"Ronald Reagan\"\r\n            ]\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/quiz",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"quiz"
					]
				}
			},
			"response": []
		},
		{
			"name": "/quiz - [T] - Update Quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Quiz Successfully updated\", function () {\r",
							"     pm.expect(pm.response.json()).to.be.an('object');\r",
							"     pm.expect(pm.response.json()).to.have.property('id');\r",
							"     pm.expect(pm.response.json()).to.have.property('createdAt');\r",
							"     pm.expect(pm.response.json()).to.have.property('updatedAt');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ivans Postman Quiz\",\r\n    \"totalScore\": 18,\r\n    \"passingPercentage\": 75,\r\n    \"showStopperQuestion\": 1,\r\n    \"questions\": [\r\n        {\r\n            \"type\": \"TEXTUAL\",\r\n            \"question\": \"What is your name?\",\r\n            \"score\": 5\r\n        },\r\n        {\r\n            \"type\": \"SINGLE_CHOICE\",\r\n            \"question\": \"Which city is city largest in California?\",\r\n            \"score\": 7,\r\n            \"answer\": 2,\r\n            \"hasOtherOption\": false,\r\n            \"options\": [\r\n                \"San Francisco\",\r\n                \"Sacramento\",\r\n                \"Los Angeles\",\r\n                \"Redding\"\r\n            ]\r\n        },\r\n        {\r\n            \"type\": \"MULTIPLE_CHOICE\",\r\n            \"question\": \"Who was apple founded by?\",\r\n            \"score\": 6,\r\n            \"answers\": [\r\n                0,\r\n                1,\r\n                2\r\n            ],\r\n            \"hasOtherOption\": true,\r\n            \"options\": [\r\n                \"Steve Jobs\",\r\n                \"Steve Wozniak\",\r\n                \"Ronald Wayne\",\r\n                \"Ronald Reagan\"\r\n            ]\r\n        }\r\n    ],\r\n    \"id\": {{tQuiz}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/quiz",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"quiz"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Assignments - [T] - Get All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Assignments recieved\", function () {\r",
							"    var responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.be.an('array');\r",
							"    pm.expect(responseJSON).to.have.lengthOf.at.least(1, \"Assignments should be received\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/assignments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Assignments - [T] - Create Assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Assignment Created\", function () {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"     \r",
							"\r",
							"     pm.expect(responseJSON).to.be.an('array');\r",
							"     responseJSON.forEach((assignment) => {\r",
							"            pm.expect(assignment).to.have.property('id');\r",
							"            pm.expect(assignment).to.have.property('userId');\r",
							"            pm.expect(assignment).to.have.property('quiz');\r",
							"            pm.expect(assignment).to.have.property('assignmentGroupID');\r",
							"            pm.expect(assignment).to.have.property('status');\r",
							"            pm.expect(assignment).to.have.property('result');\r",
							"            pm.expect(assignment).to.have.property('gradedBy');\r",
							"            pm.expect(assignment).to.have.property('answers');\r",
							"            pm.expect(assignment).to.have.property('scores');\r",
							"            pm.expect(assignment).to.have.property('additionalScores');\r",
							"            pm.expect(assignment).to.have.property('comments');\r",
							"            pm.expect(assignment).to.have.property('summary');\r",
							"            pm.expect(assignment).to.have.property('updatedAt');\r",
							"            pm.expect(assignment).to.have.property('createdAt');\r",
							"     });\r",
							"});\r",
							"\r",
							"pm.environment.set('assignmentId', responseJSON[0].id)\r",
							"pm.environment.set('assignmentGroupID', responseJSON[0].assignmentGroupID)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"quizId\": {{tQuiz}},\r\n  \"userIds\": [{{userId}}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/assignment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Assignments - [S] - Get All Assignments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{sToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/my-assignments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my-assignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Assignments - [S] - Submit Answers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"All good\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{sToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"assignmentId\": {{assignmentId}},\r\n    \"answers\": [\r\n        {\r\n            \"textAnswer\": \"Ivan\",\r\n            \"answer\": null\r\n        },\r\n        {\r\n            \"textAnswer\": \"\",\r\n            \"answer\": 2\r\n        },\r\n        {\r\n            \"textAnswer\": \"\",\r\n            \"answer\": [\r\n                0,\r\n                1,\r\n                2\r\n            ]\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/submit-assignment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"submit-assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Assignments - [T] - Grade Assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let assignmentId= pm.environment.get(\"assignmentId\");\r",
							"console.log(assignmentId)\r",
							"pm.test('Assignment Graded', () => {\r",
							"\r",
							"    let obj = pm.response.json().find(e => e.id === assignmentId);\r",
							"    console.log(obj);\r",
							"\r",
							"    pm.test(\"Result Passed\", function () {\r",
							"        pm.expect(obj.result).to.include(\"PASSED\");\r",
							"    });\r",
							"     pm.test(\"Status Graded\", function () {\r",
							"        pm.expect(obj.status).to.include(\"GRADED\");\r",
							"    });\r",
							"    pm.test(\"Status Graded\", function () {\r",
							"        pm.expect(obj.gradedBy).to.include(\"TEACHER\");\r",
							"    });\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"summary\": \"Great Job there\",\r\n    \"result\": \"PASSED\",\r\n    \"grades\": [\r\n        {\r\n            \"comment\": \"\",\r\n            \"additionalScore\": 5\r\n        },\r\n        {\r\n            \"comment\": \"Thats Right!\",\r\n            \"additionalScore\": 0\r\n        },\r\n        {\r\n            \"comment\": \"WOW!\",\r\n            \"additionalScore\": 0\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/assignment/{{assignmentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignment",
						"{{assignmentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/My-Grades - [S] - Get my grades",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string PASSED\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"PASSED\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{sToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/my-grades",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my-grades"
					]
				}
			},
			"response": []
		},
		{
			"name": "/Assignments - [T] - Delete Assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Assignment was deleted\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/assignment/{{assignmentGroupID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignment",
						"{{assignmentGroupID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/quiz - [T] - Delete Quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Quiz Successfully updated\", function () {\r",
							"     pm.expect(pm.response.json()).to.be.an('object');\r",
							"     pm.expect(pm.response.json()).to.have.property('status', 'success');\r",
							"     pm.expect(pm.response.json()).to.have.property('message','Quiz was deleted');\r",
							"    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/quiz/{{tQuiz}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"quiz",
						"{{tQuiz}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/users - [T] Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User Deleted 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "email",
			"value": "",
			"type": "string"
		},
		{
			"key": "password",
			"value": "",
			"type": "string"
		}
	]
}